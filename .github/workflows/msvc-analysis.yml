name: Microsoft C++ Code Analysis

on:
  workflow_dispatch:
  pull_request:
    branches: [ master ]
  schedule:
    - cron: '00 22 * * 5'

env:
  # Path to the CMake build directory.
  build: '${{ github.workspace }}/build'
  X_VCPKG_NUGET_ID_PREFIX: 'colorer'
  VCPKG_BINARY_SOURCES: 'clear;nuget,GitHub,readwrite'

jobs:
  analyze:
    name: Analyze
    runs-on: windows-latest

    steps:
      - name: Checkout source
        uses: actions/checkout@v2
        with:
          submodules: recursive
          # fetch all for vcpkg versions functionality
          fetch-depth: 0

      - name: Install vcpkg
        run: |
          cd external\vcpkg
          .\bootstrap-vcpkg.bat

      - name: Add C++ build tools to PATH
        uses: ilammy/msvc-dev-cmd@v1.5.0
        with:
          arch: ${{ matrix.arch }}

      - name: Setup NuGet Credentials for vpckg cache
        shell: bash
        run: >
          `$GITHUB_WORKSPACE/external/vcpkg/vcpkg fetch nuget | tail -n 1`
          sources add
          -source "https://nuget.pkg.github.com/colorer/index.json"
          -storepasswordincleartext
          -name "GitHub"
          -username "${{ secrets.PACKAGES_GITHUB_USER }}"
          -password "${{ secrets.PACKAGES_GITHUB_TOKEN }}"

      - name: Configure CMake
        shell: bash
        run: >
          cmake $GITHUB_WORKSPACE -B ${{ env.build }}
          -G "Ninja"
          -DCMAKE_BUILD_TYPE=$BUILD_TYPE
          -DCOLORER_BUILD_TEST=ON
          -DCOLORER_BUILD_ARCH=x64
          -DCMAKE_TOOLCHAIN_FILE=$GITHUB_WORKSPACE/external/vcpkg/scripts/buildsystems/vcpkg.cmake
          -DVCPKG_OVERLAY_PORTS=$GITHUB_WORKSPACE/external/vcpkg-ports
          -DVCPKG_OVERLAY_TRIPLETS=$GITHUB_WORKSPACE/external/vcpkg-triplets
          -DVCPKG_TARGET_TRIPLET=x64-windows-static-rel
          -DVCPKG_FEATURE_FLAGS=manifests,versions

      # Build is not required unless generated source files are used
      # - name: Build CMake
      #   run: cmake --build ${{ env.build }}

      - name: Initialize MSVC Code Analysis
        uses: microsoft/msvc-code-analysis-action@47ecec99bf7ce0399ed85cbb5012b6f24eab5959
        # Provide a unique ID to access the sarif output path
        id: run-analysis
        with:
          cmakeBuildDirectory: ${{ env.build }}
          # Ruleset file that will determine what checks will be run
          ruleset: NativeRecommendedRules.ruleset

      # Upload SARIF file to GitHub Code Scanning Alerts
      - name: Upload SARIF to GitHub
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: ${{ steps.run-analysis.outputs.sarif }}

      # Upload SARIF file as an Artifact to download and view
      # - name: Upload SARIF as an Artifact
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: sarif-file
      #     path: ${{ steps.run-analysis.outputs.sarif }}
